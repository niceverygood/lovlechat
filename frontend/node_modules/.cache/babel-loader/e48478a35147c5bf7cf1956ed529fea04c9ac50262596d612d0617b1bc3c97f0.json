{"ast":null,"code":"import _objectSpread from\"/Users/seungsoohan/LovleChat/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useCallback,useEffect,useState}from\"react\";import{API_BASE_URL}from'../lib/openai';export function useChat(characterId,personaId){const[messages,setMessages]=useState([]);const[input,setInput]=useState(\"\");const[loading,setLoading]=useState(false);const[favor,setFavor]=useState(0);// 메시지 불러오기 (에러 핸들링 및 성능 최적화)\nuseEffect(()=>{if(!characterId||!personaId)return;const controller=new AbortController();fetch(\"\".concat(API_BASE_URL,\"/api/chat?personaId=\").concat(personaId,\"&characterId=\").concat(characterId),{signal:controller.signal,headers:{'Cache-Control':'no-cache'}}).then(res=>res.json()).then(data=>{if(data.ok){setMessages(data.messages.map(msg=>({sender:msg.sender,text:msg.message,avatar:msg.sender===\"ai\"?\"/avatars/\".concat(characterId,\".jpg\"):undefined})));if(typeof data.favor===\"number\")setFavor(data.favor);}}).catch(err=>{if(err.name!=='AbortError'){console.warn('Failed to load messages:',err);// 폴백 데이터 설정\nsetMessages([]);setFavor(0);}});return()=>controller.abort();},[characterId,personaId]);const sendMessage=useCallback(async msg=>{if(!msg.trim())return;setLoading(true);setMessages(prev=>[...prev,{sender:\"user\",text:msg}]);const userMsg=msg;setInput(\"\");try{const history=messages.slice(-5).concat([{sender:\"user\",text:msg}]);// 히스토리 줄임 (9->5)\nconst requestBody={personaId,characterId,message:userMsg,sender:\"user\",history:history.map(m=>_objectSpread(_objectSpread({},m),{},{message:m.text}))};const controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),30000);// 30초 타임아웃\nconst response=await fetch(\"\".concat(API_BASE_URL,\"/api/chat\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\",\"Cache-Control\":\"no-cache\"},body:JSON.stringify(requestBody),signal:controller.signal});clearTimeout(timeoutId);const data=await response.json();if(data.ok){if(data.aiText){setMessages(prev=>[...prev,{sender:\"ai\",text:data.aiText,avatar:\"/avatars/\".concat(characterId,\".jpg\")}]);}if(typeof data.favorDelta===\"number\"&&!isNaN(data.favorDelta)&&data.favorDelta!==0){setFavor(prev=>prev+data.favorDelta);setMessages(prev=>[...prev,{sender:\"system\",text:data.favorDelta>0?\"\\uD638\\uAC10\\uB3C4 \".concat(data.favorDelta,\" \\uC99D\\uAC00!\"):\"\\uD638\\uAC10\\uB3C4 \".concat(-data.favorDelta,\" \\uD558\\uB77D!\")}]);}}else{console.error(\"Failed to send message:\",data.error);// 에러시 폴백 응답 추가\nsetMessages(prev=>[...prev,{sender:\"ai\",text:\"죄송해요, 일시적으로 응답에 문제가 있어요. 잠시 후 다시 시도해주세요.\",avatar:\"/avatars/\".concat(characterId,\".jpg\")}]);}}catch(error){console.error(\"Error sending message:\",error);// 네트워크 에러시 폴백 응답\nsetMessages(prev=>[...prev,{sender:\"ai\",text:\"연결에 문제가 있어요. 네트워크 상태를 확인하고 다시 시도해주세요.\",avatar:\"/avatars/\".concat(characterId,\".jpg\")}]);}finally{setLoading(false);}},[characterId,personaId,messages]);// input 제거 (불필요한 의존성)\nreturn{messages,input,setInput,sendMessage,setMessages,loading,favor};}","map":{"version":3,"names":["useCallback","useEffect","useState","API_BASE_URL","useChat","characterId","personaId","messages","setMessages","input","setInput","loading","setLoading","favor","setFavor","controller","AbortController","fetch","concat","signal","headers","then","res","json","data","ok","map","msg","sender","text","message","avatar","undefined","catch","err","name","console","warn","abort","sendMessage","trim","prev","userMsg","history","slice","requestBody","m","_objectSpread","timeoutId","setTimeout","response","method","body","JSON","stringify","clearTimeout","aiText","favorDelta","isNaN","error"],"sources":["/Users/seungsoohan/LovleChat/frontend/src/hooks/useChat.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport { API_BASE_URL } from '../lib/openai';\n\nexport interface Msg {\n  sender: \"user\" | \"ai\" | \"system\";\n  text: string;\n  avatar?: string;\n  characterName?: string;\n  characterProfileImg?: string;\n  characterAge?: number;\n  characterJob?: string;\n  name?: string;\n  age?: number | string;\n  job?: string;\n}\n\nexport function useChat(characterId: string, personaId: string) {\n  const [messages, setMessages] = useState<Msg[]>([]);\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [favor, setFavor] = useState(0);\n\n  // 메시지 불러오기 (에러 핸들링 및 성능 최적화)\n  useEffect(() => {\n    if (!characterId || !personaId) return;\n    \n    const controller = new AbortController();\n    \n    fetch(`${API_BASE_URL}/api/chat?personaId=${personaId}&characterId=${characterId}`, {\n      signal: controller.signal,\n      headers: {\n        'Cache-Control': 'no-cache'\n      }\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.ok) {\n          setMessages(\n            data.messages.map((msg: any) => ({\n              sender: msg.sender,\n              text: msg.message,\n              avatar: msg.sender === \"ai\" ? `/avatars/${characterId}.jpg` : undefined,\n            }))\n          );\n          if (typeof data.favor === \"number\") setFavor(data.favor);\n        }\n      })\n      .catch(err => {\n        if (err.name !== 'AbortError') {\n          console.warn('Failed to load messages:', err);\n          // 폴백 데이터 설정\n          setMessages([]);\n          setFavor(0);\n        }\n      });\n    \n    return () => controller.abort();\n  }, [characterId, personaId]);\n\n  const sendMessage = useCallback(async (msg: string) => {\n    if (!msg.trim()) return;\n\n    setLoading(true);\n    setMessages((prev) => [...prev, { sender: \"user\", text: msg }]);\n    const userMsg = msg;\n    setInput(\"\");\n\n    try {\n      const history = messages.slice(-5).concat([{ sender: \"user\", text: msg }]); // 히스토리 줄임 (9->5)\n      const requestBody = {\n        personaId,\n        characterId,\n        message: userMsg,\n        sender: \"user\",\n        history: history.map(m => ({ ...m, message: m.text }))\n      };\n      \n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30초 타임아웃\n      \n      const response = await fetch(`${API_BASE_URL}/api/chat`, {\n        method: \"POST\",\n        headers: { \n          \"Content-Type\": \"application/json\",\n          \"Cache-Control\": \"no-cache\"\n        },\n        body: JSON.stringify(requestBody),\n        signal: controller.signal\n      });\n      \n      clearTimeout(timeoutId);\n      const data = await response.json();\n\n      if (data.ok) {\n        if (data.aiText) {\n          setMessages((prev) => [\n            ...prev,\n            {\n              sender: \"ai\",\n              text: data.aiText,\n              avatar: `/avatars/${characterId}.jpg`,\n            },\n          ]);\n        }\n        if (typeof data.favorDelta === \"number\" && !isNaN(data.favorDelta) && data.favorDelta !== 0) {\n          setFavor((prev) => prev + data.favorDelta);\n          setMessages((prev) => [\n            ...prev,\n            {\n              sender: \"system\",\n              text: data.favorDelta > 0 ? `호감도 ${data.favorDelta} 증가!` : `호감도 ${-data.favorDelta} 하락!`,\n            },\n          ]);\n        }\n      } else {\n        console.error(\"Failed to send message:\", data.error);\n        // 에러시 폴백 응답 추가\n        setMessages((prev) => [\n          ...prev,\n          {\n            sender: \"ai\",\n            text: \"죄송해요, 일시적으로 응답에 문제가 있어요. 잠시 후 다시 시도해주세요.\",\n            avatar: `/avatars/${characterId}.jpg`,\n          },\n        ]);\n      }\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      // 네트워크 에러시 폴백 응답\n      setMessages((prev) => [\n        ...prev,\n        {\n          sender: \"ai\",\n          text: \"연결에 문제가 있어요. 네트워크 상태를 확인하고 다시 시도해주세요.\",\n          avatar: `/avatars/${characterId}.jpg`,\n        },\n      ]);\n    } finally {\n      setLoading(false);\n    }\n  }, [characterId, personaId, messages]); // input 제거 (불필요한 의존성)\n\n  return { messages, input, setInput, sendMessage, setMessages, loading, favor };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}