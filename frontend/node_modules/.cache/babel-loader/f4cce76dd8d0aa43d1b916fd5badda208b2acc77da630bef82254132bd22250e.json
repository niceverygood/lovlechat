{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from \"react\";\nexport function useChat(characterId) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const userId = \"user_74127\";\n\n  // 메시지 불러오기\n  useEffect(() => {\n    if (!characterId) return;\n    fetch(`/api/chat?userId=${userId}&characterId=${characterId}`).then(res => res.json()).then(data => {\n      if (data.ok) {\n        setMessages(data.messages.map(msg => ({\n          sender: msg.sender,\n          text: msg.message,\n          avatar: msg.sender === \"ai\" ? `/avatars/${characterId}.jpg` : undefined\n        })));\n      }\n    });\n  }, [characterId]);\n  const sendMessage = useCallback(async msg => {\n    if (!msg.trim()) return;\n    setLoading(true);\n    // 사용자가 보낸 메시지\n    setMessages(prev => [...prev, {\n      sender: \"user\",\n      text: msg\n    }]);\n    const userMsg = msg;\n    setInput(\"\");\n    try {\n      const response = await fetch(\"/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userId,\n          characterId,\n          message: userMsg,\n          sender: \"user\"\n        })\n      });\n      const data = await response.json();\n      if (data.ok) {\n        // AI 답변이 있으면 메시지에 추가\n        if (data.aiText) {\n          setMessages(prev => [...prev, {\n            sender: \"ai\",\n            text: data.aiText,\n            avatar: `/avatars/${characterId}.jpg`\n          }]);\n        }\n      } else {\n        console.error(\"Failed to send message:\", data.error);\n      }\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    } finally {\n      setLoading(false);\n    }\n  }, [input, characterId]);\n  return {\n    messages,\n    input,\n    setInput,\n    sendMessage,\n    setMessages,\n    loading\n  };\n}\n_s(useChat, \"ADVBd1HSPkqHIV4QOSqnO5lCLcw=\");","map":{"version":3,"names":["useCallback","useEffect","useState","useChat","characterId","_s","messages","setMessages","input","setInput","loading","setLoading","userId","fetch","then","res","json","data","ok","map","msg","sender","text","message","avatar","undefined","sendMessage","trim","prev","userMsg","response","method","headers","body","JSON","stringify","aiText","console","error"],"sources":["/Users/seungsoohan/LovleChat/frontend/src/hooks/useChat.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\n\nexport interface Msg {\n  sender: \"user\" | \"ai\";\n  text: string;\n  avatar?: string;\n}\n\nexport function useChat(characterId: string) {\n  const [messages, setMessages] = useState<Msg[]>([]);\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const userId = \"user_74127\";\n\n  // 메시지 불러오기\n  useEffect(() => {\n    if (!characterId) return;\n    fetch(`/api/chat?userId=${userId}&characterId=${characterId}`)\n      .then(res => res.json())\n      .then(data => {\n        if (data.ok) {\n          setMessages(\n            data.messages.map((msg: any) => ({\n              sender: msg.sender,\n              text: msg.message,\n              avatar: msg.sender === \"ai\" ? `/avatars/${characterId}.jpg` : undefined,\n            }))\n          );\n        }\n      });\n  }, [characterId]);\n\n  const sendMessage = useCallback(async (msg: string) => {\n    if (!msg.trim()) return;\n\n    setLoading(true);\n    // 사용자가 보낸 메시지\n    setMessages((prev) => [...prev, { sender: \"user\", text: msg }]);\n    const userMsg = msg;\n    setInput(\"\");\n\n    try {\n      const response = await fetch(\"/api/chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          userId,\n          characterId,\n          message: userMsg,\n          sender: \"user\",\n        }),\n      });\n      const data = await response.json();\n      \n      if (data.ok) {\n        // AI 답변이 있으면 메시지에 추가\n        if (data.aiText) {\n          setMessages((prev) => [\n            ...prev,\n            {\n              sender: \"ai\",\n              text: data.aiText,\n              avatar: `/avatars/${characterId}.jpg`,\n            },\n          ]);\n        }\n      } else {\n        console.error(\"Failed to send message:\", data.error);\n      }\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    } finally {\n      setLoading(false);\n    }\n  }, [input, characterId]);\n\n  return { messages, input, setInput, sendMessage, setMessages, loading };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}