{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from \"react\";\nimport { API_BASE_URL } from '../lib/openai';\nexport function useChat(characterId, personaId) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [favor, setFavor] = useState(0);\n\n  // 메시지 불러오기 (에러 핸들링 및 성능 최적화)\n  useEffect(() => {\n    if (!characterId || !personaId) return;\n    const controller = new AbortController();\n    fetch(`${API_BASE_URL}/api/chat?personaId=${personaId}&characterId=${characterId}`, {\n      signal: controller.signal,\n      headers: {\n        'Cache-Control': 'no-cache'\n      }\n    }).then(res => res.json()).then(data => {\n      if (data.ok) {\n        setMessages(data.messages.map(msg => ({\n          sender: msg.sender,\n          text: msg.message,\n          avatar: msg.sender === \"ai\" ? `/avatars/${characterId}.jpg` : undefined\n        })));\n        if (typeof data.favor === \"number\") setFavor(data.favor);\n      }\n    }).catch(err => {\n      if (err.name !== 'AbortError') {\n        console.warn('Failed to load messages:', err);\n        // 폴백 데이터 설정\n        setMessages([]);\n        setFavor(0);\n      }\n    });\n    return () => controller.abort();\n  }, [characterId, personaId]);\n  const sendMessage = useCallback(async msg => {\n    if (!msg.trim()) return;\n    setLoading(true);\n    setMessages(prev => [...prev, {\n      sender: \"user\",\n      text: msg\n    }]);\n    const userMsg = msg;\n    setInput(\"\");\n    try {\n      const history = messages.slice(-5).concat([{\n        sender: \"user\",\n        text: msg\n      }]); // 히스토리 줄임 (9->5)\n      const requestBody = {\n        personaId,\n        characterId,\n        message: userMsg,\n        sender: \"user\",\n        history: history.map(m => ({\n          ...m,\n          message: m.text\n        }))\n      };\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30초 타임아웃\n\n      const response = await fetch(`${API_BASE_URL}/api/chat`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Cache-Control\": \"no-cache\"\n        },\n        body: JSON.stringify(requestBody),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      const data = await response.json();\n      if (data.ok) {\n        if (data.aiText) {\n          setMessages(prev => [...prev, {\n            sender: \"ai\",\n            text: data.aiText,\n            avatar: `/avatars/${characterId}.jpg`\n          }]);\n        }\n        if (typeof data.favorDelta === \"number\" && !isNaN(data.favorDelta) && data.favorDelta !== 0) {\n          setFavor(prev => prev + data.favorDelta);\n          setMessages(prev => [...prev, {\n            sender: \"system\",\n            text: data.favorDelta > 0 ? `호감도 ${data.favorDelta} 증가!` : `호감도 ${-data.favorDelta} 하락!`\n          }]);\n        }\n      } else {\n        console.error(\"Failed to send message:\", data.error);\n        // 에러시 폴백 응답 추가\n        setMessages(prev => [...prev, {\n          sender: \"ai\",\n          text: \"죄송해요, 일시적으로 응답에 문제가 있어요. 잠시 후 다시 시도해주세요.\",\n          avatar: `/avatars/${characterId}.jpg`\n        }]);\n      }\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      // 네트워크 에러시 폴백 응답\n      setMessages(prev => [...prev, {\n        sender: \"ai\",\n        text: \"연결에 문제가 있어요. 네트워크 상태를 확인하고 다시 시도해주세요.\",\n        avatar: `/avatars/${characterId}.jpg`\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  }, [characterId, personaId, messages]); // input 제거 (불필요한 의존성)\n\n  return {\n    messages,\n    input,\n    setInput,\n    sendMessage,\n    setMessages,\n    loading,\n    favor\n  };\n}\n_s(useChat, \"oR8J9H1zY5tG5MXtU5L9LieMQiY=\");","map":{"version":3,"names":["useCallback","useEffect","useState","API_BASE_URL","useChat","characterId","personaId","_s","messages","setMessages","input","setInput","loading","setLoading","favor","setFavor","controller","AbortController","fetch","signal","headers","then","res","json","data","ok","map","msg","sender","text","message","avatar","undefined","catch","err","name","console","warn","abort","sendMessage","trim","prev","userMsg","history","slice","concat","requestBody","m","timeoutId","setTimeout","response","method","body","JSON","stringify","clearTimeout","aiText","favorDelta","isNaN","error"],"sources":["/Users/seungsoohan/LovleChat/frontend/src/hooks/useChat.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport { API_BASE_URL } from '../lib/openai';\n\nexport interface Msg {\n  sender: \"user\" | \"ai\" | \"system\";\n  text: string;\n  avatar?: string;\n  characterName?: string;\n  characterProfileImg?: string;\n  characterAge?: number;\n  characterJob?: string;\n  name?: string;\n  age?: number | string;\n  job?: string;\n}\n\nexport function useChat(characterId: string, personaId: string) {\n  const [messages, setMessages] = useState<Msg[]>([]);\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [favor, setFavor] = useState(0);\n\n  // 메시지 불러오기 (에러 핸들링 및 성능 최적화)\n  useEffect(() => {\n    if (!characterId || !personaId) return;\n    \n    const controller = new AbortController();\n    \n    fetch(`${API_BASE_URL}/api/chat?personaId=${personaId}&characterId=${characterId}`, {\n      signal: controller.signal,\n      headers: {\n        'Cache-Control': 'no-cache'\n      }\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.ok) {\n          setMessages(\n            data.messages.map((msg: any) => ({\n              sender: msg.sender,\n              text: msg.message,\n              avatar: msg.sender === \"ai\" ? `/avatars/${characterId}.jpg` : undefined,\n            }))\n          );\n          if (typeof data.favor === \"number\") setFavor(data.favor);\n        }\n      })\n      .catch(err => {\n        if (err.name !== 'AbortError') {\n          console.warn('Failed to load messages:', err);\n          // 폴백 데이터 설정\n          setMessages([]);\n          setFavor(0);\n        }\n      });\n    \n    return () => controller.abort();\n  }, [characterId, personaId]);\n\n  const sendMessage = useCallback(async (msg: string) => {\n    if (!msg.trim()) return;\n\n    setLoading(true);\n    setMessages((prev) => [...prev, { sender: \"user\", text: msg }]);\n    const userMsg = msg;\n    setInput(\"\");\n\n    try {\n      const history = messages.slice(-5).concat([{ sender: \"user\", text: msg }]); // 히스토리 줄임 (9->5)\n      const requestBody = {\n        personaId,\n        characterId,\n        message: userMsg,\n        sender: \"user\",\n        history: history.map(m => ({ ...m, message: m.text }))\n      };\n      \n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30초 타임아웃\n      \n      const response = await fetch(`${API_BASE_URL}/api/chat`, {\n        method: \"POST\",\n        headers: { \n          \"Content-Type\": \"application/json\",\n          \"Cache-Control\": \"no-cache\"\n        },\n        body: JSON.stringify(requestBody),\n        signal: controller.signal\n      });\n      \n      clearTimeout(timeoutId);\n      const data = await response.json();\n\n      if (data.ok) {\n        if (data.aiText) {\n          setMessages((prev) => [\n            ...prev,\n            {\n              sender: \"ai\",\n              text: data.aiText,\n              avatar: `/avatars/${characterId}.jpg`,\n            },\n          ]);\n        }\n        if (typeof data.favorDelta === \"number\" && !isNaN(data.favorDelta) && data.favorDelta !== 0) {\n          setFavor((prev) => prev + data.favorDelta);\n          setMessages((prev) => [\n            ...prev,\n            {\n              sender: \"system\",\n              text: data.favorDelta > 0 ? `호감도 ${data.favorDelta} 증가!` : `호감도 ${-data.favorDelta} 하락!`,\n            },\n          ]);\n        }\n      } else {\n        console.error(\"Failed to send message:\", data.error);\n        // 에러시 폴백 응답 추가\n        setMessages((prev) => [\n          ...prev,\n          {\n            sender: \"ai\",\n            text: \"죄송해요, 일시적으로 응답에 문제가 있어요. 잠시 후 다시 시도해주세요.\",\n            avatar: `/avatars/${characterId}.jpg`,\n          },\n        ]);\n      }\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      // 네트워크 에러시 폴백 응답\n      setMessages((prev) => [\n        ...prev,\n        {\n          sender: \"ai\",\n          text: \"연결에 문제가 있어요. 네트워크 상태를 확인하고 다시 시도해주세요.\",\n          avatar: `/avatars/${characterId}.jpg`,\n        },\n      ]);\n    } finally {\n      setLoading(false);\n    }\n  }, [characterId, personaId, messages]); // input 제거 (불필요한 의존성)\n\n  return { messages, input, setInput, sendMessage, setMessages, loading, favor };\n}\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACxD,SAASC,YAAY,QAAQ,eAAe;AAe5C,OAAO,SAASC,OAAOA,CAACC,WAAmB,EAAEC,SAAiB,EAAE;EAAAC,EAAA;EAC9D,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAQ,EAAE,CAAC;EACnD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;;EAErC;EACAD,SAAS,CAAC,MAAM;IACd,IAAI,CAACI,WAAW,IAAI,CAACC,SAAS,EAAE;IAEhC,MAAMU,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IAExCC,KAAK,CAAC,GAAGf,YAAY,uBAAuBG,SAAS,gBAAgBD,WAAW,EAAE,EAAE;MAClFc,MAAM,EAAEH,UAAU,CAACG,MAAM;MACzBC,OAAO,EAAE;QACP,eAAe,EAAE;MACnB;IACF,CAAC,CAAC,CACCC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;MACZ,IAAIA,IAAI,CAACC,EAAE,EAAE;QACXhB,WAAW,CACTe,IAAI,CAAChB,QAAQ,CAACkB,GAAG,CAAEC,GAAQ,KAAM;UAC/BC,MAAM,EAAED,GAAG,CAACC,MAAM;UAClBC,IAAI,EAAEF,GAAG,CAACG,OAAO;UACjBC,MAAM,EAAEJ,GAAG,CAACC,MAAM,KAAK,IAAI,GAAG,YAAYvB,WAAW,MAAM,GAAG2B;QAChE,CAAC,CAAC,CACJ,CAAC;QACD,IAAI,OAAOR,IAAI,CAACV,KAAK,KAAK,QAAQ,EAAEC,QAAQ,CAACS,IAAI,CAACV,KAAK,CAAC;MAC1D;IACF,CAAC,CAAC,CACDmB,KAAK,CAACC,GAAG,IAAI;MACZ,IAAIA,GAAG,CAACC,IAAI,KAAK,YAAY,EAAE;QAC7BC,OAAO,CAACC,IAAI,CAAC,0BAA0B,EAAEH,GAAG,CAAC;QAC7C;QACAzB,WAAW,CAAC,EAAE,CAAC;QACfM,QAAQ,CAAC,CAAC,CAAC;MACb;IACF,CAAC,CAAC;IAEJ,OAAO,MAAMC,UAAU,CAACsB,KAAK,CAAC,CAAC;EACjC,CAAC,EAAE,CAACjC,WAAW,EAAEC,SAAS,CAAC,CAAC;EAE5B,MAAMiC,WAAW,GAAGvC,WAAW,CAAC,MAAO2B,GAAW,IAAK;IACrD,IAAI,CAACA,GAAG,CAACa,IAAI,CAAC,CAAC,EAAE;IAEjB3B,UAAU,CAAC,IAAI,CAAC;IAChBJ,WAAW,CAAEgC,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;MAAEb,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAEF;IAAI,CAAC,CAAC,CAAC;IAC/D,MAAMe,OAAO,GAAGf,GAAG;IACnBhB,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI;MACF,MAAMgC,OAAO,GAAGnC,QAAQ,CAACoC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC;QAAEjB,MAAM,EAAE,MAAM;QAAEC,IAAI,EAAEF;MAAI,CAAC,CAAC,CAAC,CAAC,CAAC;MAC5E,MAAMmB,WAAW,GAAG;QAClBxC,SAAS;QACTD,WAAW;QACXyB,OAAO,EAAEY,OAAO;QAChBd,MAAM,EAAE,MAAM;QACde,OAAO,EAAEA,OAAO,CAACjB,GAAG,CAACqB,CAAC,KAAK;UAAE,GAAGA,CAAC;UAAEjB,OAAO,EAAEiB,CAAC,CAAClB;QAAK,CAAC,CAAC;MACvD,CAAC;MAED,MAAMb,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;MACxC,MAAM+B,SAAS,GAAGC,UAAU,CAAC,MAAMjC,UAAU,CAACsB,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;MAE/D,MAAMY,QAAQ,GAAG,MAAMhC,KAAK,CAAC,GAAGf,YAAY,WAAW,EAAE;QACvDgD,MAAM,EAAE,MAAM;QACd/B,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE;QACnB,CAAC;QACDgC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,WAAW,CAAC;QACjC3B,MAAM,EAAEH,UAAU,CAACG;MACrB,CAAC,CAAC;MAEFoC,YAAY,CAACP,SAAS,CAAC;MACvB,MAAMxB,IAAI,GAAG,MAAM0B,QAAQ,CAAC3B,IAAI,CAAC,CAAC;MAElC,IAAIC,IAAI,CAACC,EAAE,EAAE;QACX,IAAID,IAAI,CAACgC,MAAM,EAAE;UACf/C,WAAW,CAAEgC,IAAI,IAAK,CACpB,GAAGA,IAAI,EACP;YACEb,MAAM,EAAE,IAAI;YACZC,IAAI,EAAEL,IAAI,CAACgC,MAAM;YACjBzB,MAAM,EAAE,YAAY1B,WAAW;UACjC,CAAC,CACF,CAAC;QACJ;QACA,IAAI,OAAOmB,IAAI,CAACiC,UAAU,KAAK,QAAQ,IAAI,CAACC,KAAK,CAAClC,IAAI,CAACiC,UAAU,CAAC,IAAIjC,IAAI,CAACiC,UAAU,KAAK,CAAC,EAAE;UAC3F1C,QAAQ,CAAE0B,IAAI,IAAKA,IAAI,GAAGjB,IAAI,CAACiC,UAAU,CAAC;UAC1ChD,WAAW,CAAEgC,IAAI,IAAK,CACpB,GAAGA,IAAI,EACP;YACEb,MAAM,EAAE,QAAQ;YAChBC,IAAI,EAAEL,IAAI,CAACiC,UAAU,GAAG,CAAC,GAAG,OAAOjC,IAAI,CAACiC,UAAU,MAAM,GAAG,OAAO,CAACjC,IAAI,CAACiC,UAAU;UACpF,CAAC,CACF,CAAC;QACJ;MACF,CAAC,MAAM;QACLrB,OAAO,CAACuB,KAAK,CAAC,yBAAyB,EAAEnC,IAAI,CAACmC,KAAK,CAAC;QACpD;QACAlD,WAAW,CAAEgC,IAAI,IAAK,CACpB,GAAGA,IAAI,EACP;UACEb,MAAM,EAAE,IAAI;UACZC,IAAI,EAAE,0CAA0C;UAChDE,MAAM,EAAE,YAAY1B,WAAW;QACjC,CAAC,CACF,CAAC;MACJ;IACF,CAAC,CAAC,OAAOsD,KAAK,EAAE;MACdvB,OAAO,CAACuB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C;MACAlD,WAAW,CAAEgC,IAAI,IAAK,CACpB,GAAGA,IAAI,EACP;QACEb,MAAM,EAAE,IAAI;QACZC,IAAI,EAAE,uCAAuC;QAC7CE,MAAM,EAAE,YAAY1B,WAAW;MACjC,CAAC,CACF,CAAC;IACJ,CAAC,SAAS;MACRQ,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACR,WAAW,EAAEC,SAAS,EAAEE,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAExC,OAAO;IAAEA,QAAQ;IAAEE,KAAK;IAAEC,QAAQ;IAAE4B,WAAW;IAAE9B,WAAW;IAAEG,OAAO;IAAEE;EAAM,CAAC;AAChF;AAACP,EAAA,CA/HeH,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}